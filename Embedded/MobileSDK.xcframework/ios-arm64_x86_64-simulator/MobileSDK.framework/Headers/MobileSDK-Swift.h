#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef MOBILESDK_SWIFT_H
#define MOBILESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)





@class NSCoder;
@class UIEvent;

///
SWIFT_CLASS_NAMED("ExcoContainerView")
@interface ExcoContainerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


///
SWIFT_CLASS_NAMED("ExcoDisplayView")
@interface ExcoDisplayView : ExcoContainerView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@protocol ExcoMobileSDKDelegate;
@class NSString;
@class ExcoPlayerConfigurationBuilder;
@class ExcoPlayerConfiguration;

/// Primary class to integrate ExcoMobileSDK in your app
SWIFT_CLASS_NAMED("ExcoMobileSDK")
@interface ExcoMobileSDK : NSObject
/// The object that acts as the delegate of the ExcoMobileSDK.
/// The delegate must adopt the <code>ExcoMobileSDKDelegate</code> protocol. The delegate isn’t retained.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <ExcoMobileSDKDelegate> _Nullable delegate;)
+ (id <ExcoMobileSDKDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <ExcoMobileSDKDelegate> _Nullable)newValue;
/// The Exco SDK should be activated early on the application lifecycle
+ (void)activate;
/// Prefetch the library JS files, should be called after the SDK is activated and as early in the application life cicle as possiable
+ (void)prefetchSDKJSFiles;
/// Use this method to generate a <code>ExcoPlayerConfigurationBuilder</code> object to configure the player configuration you wish to work with
/// \param playerID as defined during the integration / on the dashboard
///
///
/// returns:
/// A new instance of <code>ExcoPlayerConfigurationBuilder</code> ready for usage
+ (ExcoPlayerConfigurationBuilder * _Nonnull)builderWith:(NSString * _Nonnull)playerID SWIFT_WARN_UNUSED_RESULT;
/// Call this methos to toggle Web Content logs on & off, when active the logs will show in the Xcode console
/// Calling this method allows for better insight on how the web (HTML) elements of the video player work
/// \param active pass true to activate the logs, Default - false
///
+ (void)toggleWebContentLogsWithActive:(BOOL)active;
/// Call this methos to toggle OMID Content logs on & off, when active the logs will show in the Xcode console
/// Calling this method allows for better insight on how the system interacts with it’s internal OMID SDK
/// \param active pass true to activate the logs, Default - false
///
+ (void)toggleOmidContentLogsWithActive:(BOOL)active;
/// Preload player controller with a given configuration.
/// \param configuration the configuration to preload
///
+ (void)preloadPlayerWith:(ExcoPlayerConfiguration * _Nonnull)configuration;
/// Removes a <code>ExcoPlayerController</code> instance from cache.
/// \param configuration the configuration to preload
///
+ (void)offloadPlayerWith:(ExcoPlayerConfiguration * _Nonnull)configuration;
/// Removes a <code>ExcoPlayerController</code> instance from cache.
/// \param playerID the ID of the exco player to be removed
///
///
/// returns:
/// The <code>ExcoPlayerController</code> that was removed, or nil if the playerID was not present in the cache.
+ (void)offloadPlayerFor:(NSString * _Nonnull)playerID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


///
SWIFT_PROTOCOL_NAMED("ExcoMobileSDKDelegate")
@protocol ExcoMobileSDKDelegate <NSObject>
@optional
/// Called when the SDK was actived successfully
- (void)mobileSDKDidActivateSuccessfully;
/// Called when the SDK failes to activate
- (void)mobileSDKDidFailToActivate;
/// Called when the SDK has finished fetching its JS resources from remote server
- (void)mobileSDKDidFetchSDKJSFiles;
@end


///
SWIFT_PROTOCOL_NAMED("ExcoPlayerConfigurationProtocol")
@protocol ExcoPlayerConfigurationProtocol <NSObject>
/// The identifier of the spesific player as setup in exco’s dashboard systems
@property (nonatomic, readonly, copy) NSString * _Nonnull playerID;
/// The host application name
/// If not provided via the builder object the system will retrive it from the applications main bundle
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationName;
/// The host application bundle identifier
/// If not provided via the builder object the system will retrive it from the applications main bundle
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationBundle;
/// The host application verion
/// If not provided via the builder object the system will retrive it from the applications main bundle
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
/// The host application category
@property (nonatomic, readonly, copy) NSString * _Nullable applicationCategories;
/// The host application Appstore Identifier, not to be confuse with the application bundle
@property (nonatomic, readonly, copy) NSString * _Nullable applicationAppstoreId;
/// The host application Appstore product page URL
@property (nonatomic, readonly, copy) NSString * _Nullable applicationAppstoreUrl;
/// The identifier of the physical device running the player
@property (nonatomic, readonly, copy) NSString * _Nullable deviceIdentifer;
/// The IFA of the physical device running the player
@property (nonatomic, readonly, copy) NSString * _Nullable deviceIFA;
/// Indicates if the player web content is inspectable or not. Default is false
@property (nonatomic, readonly) BOOL isWebInspectable;
@end


///
SWIFT_CLASS_NAMED("ExcoPlayerConfiguration")
@interface ExcoPlayerConfiguration : NSObject <ExcoPlayerConfigurationProtocol>
@property (nonatomic, copy) NSString * _Nonnull playerID;
@property (nonatomic, copy) NSString * _Nonnull applicationName;
@property (nonatomic, copy) NSString * _Nonnull applicationBundle;
@property (nonatomic, copy) NSString * _Nonnull applicationVersion;
@property (nonatomic, copy) NSString * _Nullable applicationCategories;
@property (nonatomic, copy) NSString * _Nullable applicationAppstoreId;
@property (nonatomic, copy) NSString * _Nullable applicationAppstoreUrl;
@property (nonatomic, copy) NSString * _Nullable deviceIdentifer;
@property (nonatomic, copy) NSString * _Nullable deviceIFA;
@property (nonatomic) BOOL isWebInspectable;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("ExcoPlayerConfigurationBuilder")
@interface ExcoPlayerConfigurationBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@protocol ExcoPlayerViewDelegate;
@class UIWindow;
@class NSURL;

/// A UIView subclass hosint the Exco video player, needs a configuration object to work properly
/// The view can be configured via the @IBInspectable system or via parapaters passed in code. For details see:
/// \code
/// apply(player configuration: ExcoPlayerConfiguration, shouldStore inCache: Bool)
///
/// \endcode
SWIFT_CLASS_NAMED("ExcoPlayerView")
@interface ExcoPlayerView : UIView
/// Use this property to pass the PlayerID value via xib / storyboard IBInspectable mechanisem
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibPlayerID;
/// Use this property to pass the Application Name value via xib / storyboard IBInspectable mechanisem
/// Note: if you fail to pass a value the SDK will attempt to retrive the appication name from the apps main bundle
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibAppName;
/// Use this property to pass the Application Bundle value via xib / storyboard IBInspectable mechanisem
/// Note: if you fail to pass a value the SDK will attempt to retrive the appication bundle identifier from the apps main bundle
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibAppBundle;
/// Use this property to pass the Application Version value via xib / storyboard IBInspectable mechanisem
/// Note: if you fail to pass a value the SDK will attempt to retrive the appication ¸version from the apps main bundle
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibAppVersion;
/// Use this property to pass the Application Categories value via xib / storyboard IBInspectable mechanisem
/// NOTE: if you need to pass several values cancatinate them like so: <code>"one,two,three"</code>
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibCategories;
/// Use this property to pass the Applications Appstore ID value via xib / storyboard IBInspectable mechanisem
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibAppstoreID;
/// Use this property to pass the Applications Appstore URL value via xib / storyboard IBInspectable mechanisem
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibAppstoreUrl;
/// Use this property to pass the DeviceID value via xib / storyboard IBInspectable mechanisem
/// Note: if you fail to pass a value the SDK will attempt to retrive the devices IDFA, if the application has the right premissions
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibDeviceID;
/// Use this property to pass the DeviceIFA value via xib / storyboard IBInspectable mechanisem
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibDeviceIFA;
/// Use this property to pass the PlayerID value via xib / storyboard IBInspectable mechanisem
@property (nonatomic) IBInspectable BOOL xibCachePlayer;
/// The object that acts as the delegate of the Exco player View.
/// The delegate must adopt the <code>ExcoPlayerViewDelegate</code> protocol. The delegate isn’t retained.
@property (nonatomic, weak) IBOutlet id <ExcoPlayerViewDelegate> _Nullable delegate;
/// The configuration of the current Exco player assosiated with the view
/// To change the assosiated player use the <code>apply(player configuration: ExcoPlayerConfiguration, shouldStore inCache: Bool)</code> method
@property (nonatomic, readonly, strong) id <ExcoPlayerConfigurationProtocol> _Nullable playerConfiguration;
/// Controls whether the assosiated web video player  is inspectable in Web Inspector (Safari Developer Tools).
@property (nonatomic) BOOL isWebInspectable;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (void)awakeFromNib;
/// Use this methos to assign a new Played to the view, based on the passes configuration object
/// Note: Cashed players are retained by the system and will not die until you spesificly call on the appropriate <code>ExcoMobileSDK</code> method
/// \param configuration configuration object to be used by the system to assosiates a new palyer instance with the view
///
/// \param inCache indicate if the configured player should be retained in the SDK cache mecanisem
///
- (void)applyWithPlayer:(ExcoPlayerConfiguration * _Nonnull)configuration shouldStore:(BOOL)inCache;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (NSURL * _Nullable)test_creativeURL SWIFT_WARN_UNUSED_RESULT;
@end



///
SWIFT_PROTOCOL_NAMED("ExcoPlayerViewDelegate")
@protocol ExcoPlayerViewDelegate <NSObject>
@optional
/// This method is called when an instance of <code>ExcoPlayerView</code> has successfuly loaded  web content
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was loaded
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didFinishLoading:(NSString * _Nonnull)playerID;
/// This method is called when an instance of <code>ExcoPlayerView</code> failed loading its web content
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was loaded
///
/// \param error Error object
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didFailLoading:(NSString * _Nonnull)playerID with:(NSError * _Nonnull)error;
/// Signals that the player view finished loading its content
/// \param playerView An object representing the player view
///
- (void)didFinishLoadingContentTo:(ExcoPlayerView * _Nonnull)playerView;
/// Signals the desire to begin playback
/// \param playerView An object representing the player view
///
- (void)didStartPlaybackIn:(ExcoPlayerView * _Nonnull)playerView;
/// Pauses video playback.
/// \param playerView An object representing the player view
///
- (void)didPausePlaybackIn:(ExcoPlayerView * _Nonnull)playerView;
/// Stop and close the video player
/// \param playerView An object representing the player view
///
- (void)didClosePlaybackIn:(ExcoPlayerView * _Nonnull)playerView;
/// This method is called when an instance of <code>ExcoPlayerView</code> was muted
/// \param playerView An object representing the player view
///
- (void)didMutePlaybackIn:(ExcoPlayerView * _Nonnull)playerView;
/// This method is called when an instance of <code>ExcoPlayerView</code> was unmuted
/// \param playerView An object representing the player view
///
- (void)didUnmutePlaybackIn:(ExcoPlayerView * _Nonnull)playerView;
/// Called when the user closes the player view
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView wasClosed:(NSString * _Nonnull)playerID;
/// This method is called when an instance of <code>ExcoPlayerView</code> enters full screen  mode
/// \param playerController An object representing the player controller.
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didEnterFullscreen:(NSString * _Nonnull)playerID;
/// Called when an instance of <code>ExcoPlayerView</code> exits full screen mode
/// \param playerController An object representing the player controller.
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didExitFullscreen:(NSString * _Nonnull)playerID;
/// Called when the user clicks on the call to action button of the player
/// Note: The CTA button tipicly it titled <code>show more</code>
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didClickCTAButton:(NSString * _Nonnull)playerID;
/// Called when an ad object is initiated
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didInitiateAd:(NSString * _Nonnull)playerID;
/// Called when ad playback starts
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didStartAdPlayback:(NSString * _Nonnull)playerID;
/// Called when ad was impressed on the user
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didImpressAd:(NSString * _Nonnull)playerID;
/// Called when ad playback reach the first quartile
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didReachFirstQuartile:(NSString * _Nonnull)playerID;
/// Called when ad playback reach the second quartile
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didReachSecondQuartile:(NSString * _Nonnull)playerID;
/// Called when ad playback reach the third quartile
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didReachThirdQuartile:(NSString * _Nonnull)playerID;
/// Called when web player finishes playing an ad
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didCompleteAdPlayback:(NSString * _Nonnull)playerID;
/// Called when user clicks the <code>skip ad</code> web functionality
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didSkipAd:(NSString * _Nonnull)playerID;
/// Called when user clicks an ad
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didClickAd:(NSString * _Nonnull)playerID;
@end


SWIFT_CLASS("_TtCV9MobileSDK8ExcoView19ExcoViewCoordinator")
@interface ExcoViewCoordinator : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ExcoViewCoordinator (SWIFT_EXTENSION(MobileSDK)) <ExcoPlayerViewDelegate>
@end











#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef MOBILESDK_SWIFT_H
#define MOBILESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)





@class NSCoder;
@class UIEvent;

///
SWIFT_CLASS_NAMED("ExcoContainerView")
@interface ExcoContainerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


///
SWIFT_CLASS_NAMED("ExcoDisplayView")
@interface ExcoDisplayView : ExcoContainerView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@protocol ExcoMobileSDKDelegate;
@class NSString;
@class ExcoPlayerConfigurationBuilder;
@class ExcoPlayerConfiguration;

/// Primary class to integrate ExcoMobileSDK in your app
SWIFT_CLASS_NAMED("ExcoMobileSDK")
@interface ExcoMobileSDK : NSObject
/// The object that acts as the delegate of the ExcoMobileSDK.
/// The delegate must adopt the <code>ExcoMobileSDKDelegate</code> protocol. The delegate isn’t retained.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <ExcoMobileSDKDelegate> _Nullable delegate;)
+ (id <ExcoMobileSDKDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <ExcoMobileSDKDelegate> _Nullable)newValue;
/// The Exco SDK should be activated early on the application lifecycle
+ (void)activate;
/// Prefetch the library JS files, should be called after the SDK is activated and as early in the application life cicle as possiable
+ (void)prefetchSDKJSFiles;
/// Use this method to generate a <code>ExcoPlayerConfigurationBuilder</code> object to configure the player configuration you wish to work with
/// \param playerID as defined during the integration / on the dashboard
///
///
/// returns:
/// A new instance of <code>ExcoPlayerConfigurationBuilder</code> ready for usage
+ (ExcoPlayerConfigurationBuilder * _Nonnull)builderWith:(NSString * _Nonnull)playerID SWIFT_WARN_UNUSED_RESULT;
/// Call this methos to toggle Web Content logs on & off, when active the logs will show in the Xcode console
/// Calling this method allows for better insight on how the web (HTML) elements of the video player work
/// \param active pass true to activate the logs, Default - false
///
+ (void)toggleWebContentLogsWithActive:(BOOL)active;
/// Call this methos to toggle OMID Content logs on & off, when active the logs will show in the Xcode console
/// Calling this method allows for better insight on how the system interacts with it’s internal OMID SDK
/// \param active pass true to activate the logs, Default - false
///
+ (void)toggleOmidContentLogsWithActive:(BOOL)active;
/// Preload player controller with a given configuration.
/// \param configuration the configuration to preload
///
+ (void)preloadPlayerWith:(ExcoPlayerConfiguration * _Nonnull)configuration;
/// Removes a <code>ExcoPlayerController</code> instance from cache.
/// \param configuration the configuration to preload
///
+ (void)offloadPlayerWith:(ExcoPlayerConfiguration * _Nonnull)configuration;
/// Removes a <code>ExcoPlayerController</code> instance from cache.
/// \param playerID the ID of the exco player to be removed
///
///
/// returns:
/// The <code>ExcoPlayerController</code> that was removed, or nil if the playerID was not present in the cache.
+ (void)offloadPlayerFor:(NSString * _Nonnull)playerID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


///
SWIFT_PROTOCOL_NAMED("ExcoMobileSDKDelegate")
@protocol ExcoMobileSDKDelegate <NSObject>
@optional
/// Called when the SDK was actived successfully
- (void)mobileSDKDidActivateSuccessfully;
/// Called when the SDK failes to activate
- (void)mobileSDKDidFailToActivate;
/// Called when the SDK has finished fetching its JS resources from remote server
- (void)mobileSDKDidFetchSDKJSFiles;
@end


///
SWIFT_PROTOCOL_NAMED("ExcoPlayerConfigurationProtocol")
@protocol ExcoPlayerConfigurationProtocol <NSObject>
/// The identifier of the spesific player as setup in exco’s dashboard systems
@property (nonatomic, readonly, copy) NSString * _Nonnull playerID;
/// The host application name
/// If not provided via the builder object the system will retrive it from the applications main bundle
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationName;
/// The host application bundle identifier
/// If not provided via the builder object the system will retrive it from the applications main bundle
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationBundle;
/// The host application verion
/// If not provided via the builder object the system will retrive it from the applications main bundle
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationVersion;
/// The host application category
@property (nonatomic, readonly, copy) NSString * _Nullable applicationCategories;
/// The host application Appstore Identifier, not to be confuse with the application bundle
@property (nonatomic, readonly, copy) NSString * _Nullable applicationAppstoreId;
/// The host application Appstore product page URL
@property (nonatomic, readonly, copy) NSString * _Nullable applicationAppstoreUrl;
/// The identifier of the physical device running the player
@property (nonatomic, readonly, copy) NSString * _Nullable deviceIdentifer;
/// The IFA of the physical device running the player
@property (nonatomic, readonly, copy) NSString * _Nullable deviceIFA;
/// Indicates if the player web content is inspectable or not. Default is false
@property (nonatomic, readonly) BOOL isWebInspectable;
@end


///
SWIFT_CLASS_NAMED("ExcoPlayerConfiguration")
@interface ExcoPlayerConfiguration : NSObject <ExcoPlayerConfigurationProtocol>
@property (nonatomic, copy) NSString * _Nonnull playerID;
@property (nonatomic, copy) NSString * _Nonnull applicationName;
@property (nonatomic, copy) NSString * _Nonnull applicationBundle;
@property (nonatomic, copy) NSString * _Nonnull applicationVersion;
@property (nonatomic, copy) NSString * _Nullable applicationCategories;
@property (nonatomic, copy) NSString * _Nullable applicationAppstoreId;
@property (nonatomic, copy) NSString * _Nullable applicationAppstoreUrl;
@property (nonatomic, copy) NSString * _Nullable deviceIdentifer;
@property (nonatomic, copy) NSString * _Nullable deviceIFA;
@property (nonatomic) BOOL isWebInspectable;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("ExcoPlayerConfigurationBuilder")
@interface ExcoPlayerConfigurationBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@protocol ExcoPlayerViewDelegate;
@class UIWindow;
@class NSURL;

/// A UIView subclass hosint the Exco video player, needs a configuration object to work properly
/// The view can be configured via the @IBInspectable system or via parapaters passed in code. For details see:
/// \code
/// apply(player configuration: ExcoPlayerConfiguration, shouldStore inCache: Bool)
///
/// \endcode
SWIFT_CLASS_NAMED("ExcoPlayerView")
@interface ExcoPlayerView : UIView
/// Use this property to pass the PlayerID value via xib / storyboard IBInspectable mechanisem
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibPlayerID;
/// Use this property to pass the Application Name value via xib / storyboard IBInspectable mechanisem
/// Note: if you fail to pass a value the SDK will attempt to retrive the appication name from the apps main bundle
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibAppName;
/// Use this property to pass the Application Bundle value via xib / storyboard IBInspectable mechanisem
/// Note: if you fail to pass a value the SDK will attempt to retrive the appication bundle identifier from the apps main bundle
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibAppBundle;
/// Use this property to pass the Application Version value via xib / storyboard IBInspectable mechanisem
/// Note: if you fail to pass a value the SDK will attempt to retrive the appication ¸version from the apps main bundle
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibAppVersion;
/// Use this property to pass the Application Categories value via xib / storyboard IBInspectable mechanisem
/// NOTE: if you need to pass several values cancatinate them like so: <code>"one,two,three"</code>
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibCategories;
/// Use this property to pass the Applications Appstore ID value via xib / storyboard IBInspectable mechanisem
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibAppstoreID;
/// Use this property to pass the Applications Appstore URL value via xib / storyboard IBInspectable mechanisem
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibAppstoreUrl;
/// Use this property to pass the DeviceID value via xib / storyboard IBInspectable mechanisem
/// Note: if you fail to pass a value the SDK will attempt to retrive the devices IDFA, if the application has the right premissions
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibDeviceID;
/// Use this property to pass the DeviceIFA value via xib / storyboard IBInspectable mechanisem
@property (nonatomic, copy) IBInspectable NSString * _Nullable xibDeviceIFA;
/// Use this property to pass the PlayerID value via xib / storyboard IBInspectable mechanisem
@property (nonatomic) IBInspectable BOOL xibCachePlayer;
/// The object that acts as the delegate of the Exco player View.
/// The delegate must adopt the <code>ExcoPlayerViewDelegate</code> protocol. The delegate isn’t retained.
@property (nonatomic, weak) IBOutlet id <ExcoPlayerViewDelegate> _Nullable delegate;
/// The configuration of the current Exco player assosiated with the view
/// To change the assosiated player use the <code>apply(player configuration: ExcoPlayerConfiguration, shouldStore inCache: Bool)</code> method
@property (nonatomic, readonly, strong) id <ExcoPlayerConfigurationProtocol> _Nullable playerConfiguration;
/// Controls whether the assosiated web video player  is inspectable in Web Inspector (Safari Developer Tools).
@property (nonatomic) BOOL isWebInspectable;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (void)awakeFromNib;
/// Use this methos to assign a new Played to the view, based on the passes configuration object
/// Note: Cashed players are retained by the system and will not die until you spesificly call on the appropriate <code>ExcoMobileSDK</code> method
/// \param configuration configuration object to be used by the system to assosiates a new palyer instance with the view
///
/// \param inCache indicate if the configured player should be retained in the SDK cache mecanisem
///
- (void)applyWithPlayer:(ExcoPlayerConfiguration * _Nonnull)configuration shouldStore:(BOOL)inCache;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (NSURL * _Nullable)test_creativeURL SWIFT_WARN_UNUSED_RESULT;
@end



///
SWIFT_PROTOCOL_NAMED("ExcoPlayerViewDelegate")
@protocol ExcoPlayerViewDelegate <NSObject>
@optional
/// This method is called when an instance of <code>ExcoPlayerView</code> has successfuly loaded  web content
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was loaded
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didFinishLoading:(NSString * _Nonnull)playerID;
/// This method is called when an instance of <code>ExcoPlayerView</code> failed loading its web content
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was loaded
///
/// \param error Error object
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didFailLoading:(NSString * _Nonnull)playerID with:(NSError * _Nonnull)error;
/// Signals that the player view finished loading its content
/// \param playerView An object representing the player view
///
- (void)didFinishLoadingContentTo:(ExcoPlayerView * _Nonnull)playerView;
/// Signals the desire to begin playback
/// \param playerView An object representing the player view
///
- (void)didStartPlaybackIn:(ExcoPlayerView * _Nonnull)playerView;
/// Pauses video playback.
/// \param playerView An object representing the player view
///
- (void)didPausePlaybackIn:(ExcoPlayerView * _Nonnull)playerView;
/// Stop and close the video player
/// \param playerView An object representing the player view
///
- (void)didClosePlaybackIn:(ExcoPlayerView * _Nonnull)playerView;
/// This method is called when an instance of <code>ExcoPlayerView</code> was muted
/// \param playerView An object representing the player view
///
- (void)didMutePlaybackIn:(ExcoPlayerView * _Nonnull)playerView;
/// This method is called when an instance of <code>ExcoPlayerView</code> was unmuted
/// \param playerView An object representing the player view
///
- (void)didUnmutePlaybackIn:(ExcoPlayerView * _Nonnull)playerView;
/// Called when the user closes the player view
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView wasClosed:(NSString * _Nonnull)playerID;
/// This method is called when an instance of <code>ExcoPlayerView</code> enters full screen  mode
/// \param playerController An object representing the player controller.
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didEnterFullscreen:(NSString * _Nonnull)playerID;
/// Called when an instance of <code>ExcoPlayerView</code> exits full screen mode
/// \param playerController An object representing the player controller.
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didExitFullscreen:(NSString * _Nonnull)playerID;
/// Called when the user clicks on the call to action button of the player
/// Note: The CTA button tipicly it titled <code>show more</code>
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didClickCTAButton:(NSString * _Nonnull)playerID;
/// Called when an ad object is initiated
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didInitiateAd:(NSString * _Nonnull)playerID;
/// Called when ad playback starts
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didStartAdPlayback:(NSString * _Nonnull)playerID;
/// Called when ad was impressed on the user
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didImpressAd:(NSString * _Nonnull)playerID;
/// Called when ad playback reach the first quartile
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didReachFirstQuartile:(NSString * _Nonnull)playerID;
/// Called when ad playback reach the second quartile
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didReachSecondQuartile:(NSString * _Nonnull)playerID;
/// Called when ad playback reach the third quartile
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didReachThirdQuartile:(NSString * _Nonnull)playerID;
/// Called when web player finishes playing an ad
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didCompleteAdPlayback:(NSString * _Nonnull)playerID;
/// Called when user clicks the <code>skip ad</code> web functionality
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didSkipAd:(NSString * _Nonnull)playerID;
/// Called when user clicks an ad
/// \param playerView An object representing the player view
///
/// \param playerID The identifier of the player  that was used
///
- (void)playerView:(ExcoPlayerView * _Nonnull)playerView didClickAd:(NSString * _Nonnull)playerID;
@end


SWIFT_CLASS("_TtCV9MobileSDK8ExcoView19ExcoViewCoordinator")
@interface ExcoViewCoordinator : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ExcoViewCoordinator (SWIFT_EXTENSION(MobileSDK)) <ExcoPlayerViewDelegate>
@end











#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
