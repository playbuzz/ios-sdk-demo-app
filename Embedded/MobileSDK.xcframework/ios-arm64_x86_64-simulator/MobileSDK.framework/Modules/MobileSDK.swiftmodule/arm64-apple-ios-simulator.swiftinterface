// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name MobileSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Dispatch
import Foundation
@_exported import MobileSDK
import OMSDK_Exco
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc(ExcoPlayerConfigurationProtocol) public protocol ExcoPlayerConfigurationProtocol : ObjectiveC.NSObjectProtocol {
  @objc var playerID: Swift.String { get }
  @objc var applicationName: Swift.String { get }
  @objc var applicationBundle: Swift.String { get }
  @objc var applicationVersion: Swift.String { get }
  @objc var applicationCategories: Swift.String? { get }
  @objc var applicationAppstoreId: Swift.String? { get }
  @objc var applicationAppstoreUrl: Swift.String? { get }
  @objc var deviceIdentifer: Swift.String? { get }
  @objc var deviceIFA: Swift.String? { get }
  @objc var isWebInspectable: Swift.Bool { get }
}
@_hasMissingDesignatedInitializers @objc(ExcoPlayerConfigurationBuilder) final public class ExcoPlayerConfigurationBuilder : ObjectiveC.NSObject {
  final public let playerID: Swift.String
  final public var applicationName: Swift.String? {
    get
  }
  final public var applicationBundle: Swift.String? {
    get
  }
  final public var applicationVersion: Swift.String? {
    get
  }
  final public var categories: [Swift.String] {
    get
  }
  final public var appstoreId: Swift.String? {
    get
  }
  final public var appstoreUrl: Swift.String? {
    get
  }
  final public var deviceIdentifer: Swift.String? {
    get
  }
  final public var deviceIFA: Swift.String? {
    get
  }
  final public var isWebInspectable: Swift.Bool {
    get
  }
  @objc deinit
}
extension MobileSDK.ExcoPlayerConfigurationBuilder {
  final public func set(applicationName name: Swift.String?) -> Self
  final public func set(applicationBundle identifier: Swift.String?) -> Self
  @discardableResult
  final public func set(applicationVersion version: Swift.String?) -> Self
  @discardableResult
  final public func set(applicationCategories categories: Swift.String?) -> Self
  @discardableResult
  final public func add(applicationCategories categories: Swift.String?) -> Self
  @discardableResult
  final public func add(categories: [Swift.String]) -> Self
  @discardableResult
  final public func set(appstoreId: Swift.String?) -> Self
  @discardableResult
  final public func set(appstoreURL appstoreUrl: Swift.String?) -> Self
  @discardableResult
  final public func set(deviceIdentifer deviceId: Swift.String?) -> Self
  @discardableResult
  final public func set(deviceIFA ifa: Swift.String?) -> Self
  @discardableResult
  final public func set(webInspectable inspectable: Swift.Bool) -> Self
}
extension MobileSDK.ExcoPlayerConfigurationBuilder {
  @discardableResult
  final public func build() -> MobileSDK.ExcoPlayerConfiguration
  final public func clean()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ExcoDisplayView) @objcMembers @_Concurrency.MainActor(unsafe) public class ExcoDisplayView : MobileSDK.ExcoContainerView {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ExcoPlayerConfiguration) @objcMembers public class ExcoPlayerConfiguration : ObjectiveC.NSObject, MobileSDK.ExcoPlayerConfigurationProtocol {
  @objc public var playerID: Swift.String
  @objc public var applicationName: Swift.String
  @objc public var applicationBundle: Swift.String
  @objc public var applicationVersion: Swift.String
  @objc public var applicationCategories: Swift.String?
  @objc public var applicationAppstoreId: Swift.String?
  @objc public var applicationAppstoreUrl: Swift.String?
  @objc public var deviceIdentifer: Swift.String?
  @objc public var deviceIFA: Swift.String?
  @objc public var isWebInspectable: Swift.Bool
  @objc deinit
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
}
public struct ExcoView {
  @objc @_hasMissingDesignatedInitializers public class ExcoViewCoordinator : ObjectiveC.NSObject {
    @objc deinit
  }
  public var configurationBuilder: MobileSDK.ExcoPlayerConfigurationBuilder
  public init(configurationBuilder: MobileSDK.ExcoPlayerConfigurationBuilder)
}
extension MobileSDK.ExcoView : SwiftUI.UIViewRepresentable {
  public typealias UIViewType = MobileSDK.ExcoPlayerView
  public typealias Coordinator = MobileSDK.ExcoView.ExcoViewCoordinator
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> MobileSDK.ExcoView.Coordinator
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: MobileSDK.ExcoView.Context) -> MobileSDK.ExcoPlayerView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: MobileSDK.ExcoPlayerView, context: MobileSDK.ExcoView.Context)
  @_Concurrency.MainActor(unsafe) public static func dismantleUIView(_ uiView: MobileSDK.ExcoPlayerView, coordinator: MobileSDK.ExcoView.ExcoViewCoordinator)
  public typealias Body = Swift.Never
}
extension MobileSDK.ExcoView.ExcoViewCoordinator : MobileSDK.ExcoPlayerViewDelegate {
}
@_inheritsConvenienceInitializers @objc(ExcoContainerView) @objcMembers @_Concurrency.MainActor(unsafe) public class ExcoContainerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
@objc(ExcoPlayerViewDelegate) public protocol ExcoPlayerViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didFinishLoading playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didFailLoading playerID: Swift.String, with error: any Swift.Error)
  @objc optional func didFinishLoadingContent(to playerView: MobileSDK.ExcoPlayerView)
  @objc optional func didStartPlayback(in playerView: MobileSDK.ExcoPlayerView)
  @objc optional func didPausePlayback(in playerView: MobileSDK.ExcoPlayerView)
  @objc optional func didClosePlayback(in playerView: MobileSDK.ExcoPlayerView)
  @objc optional func didMutePlayback(in playerView: MobileSDK.ExcoPlayerView)
  @objc optional func didUnmutePlayback(in playerView: MobileSDK.ExcoPlayerView)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, wasClosed playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didEnterFullscreen playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didExitFullscreen playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didClickCTAButton playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didInitiateAd playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didStartAdPlayback playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didImpressAd playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didReachFirstQuartile playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didReachSecondQuartile playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didReachThirdQuartile playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didCompleteAdPlayback playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didSkipAd playerID: Swift.String)
  @objc optional func playerView(_ playerView: MobileSDK.ExcoPlayerView, didClickAd playerID: Swift.String)
}
@_inheritsConvenienceInitializers @objc(ExcoPlayerView) @objcMembers @_Concurrency.MainActor(unsafe) public class ExcoPlayerView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var xibPlayerID: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var xibAppName: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var xibAppBundle: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var xibAppVersion: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var xibCategories: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var xibAppstoreID: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var xibAppstoreUrl: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var xibDeviceID: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var xibDeviceIFA: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var xibCachePlayer: Swift.Bool
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var delegate: (any MobileSDK.ExcoPlayerViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var playerConfiguration: (any MobileSDK.ExcoPlayerConfigurationProtocol)? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isWebInspectable: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func encode(with coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc @_Concurrency.MainActor(unsafe) public func apply(player configuration: MobileSDK.ExcoPlayerConfiguration, shouldStore inCache: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc @_Concurrency.MainActor(unsafe) public func test_creativeURL() -> Foundation.URL?
}
@objc(ExcoMobileSDKDelegate) public protocol ExcoMobileSDKDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func mobileSDKDidActivateSuccessfully()
  @objc optional func mobileSDKDidFailToActivate()
  @objc optional func mobileSDKDidFetchSDKJSFiles()
}
@_inheritsConvenienceInitializers @objc(ExcoMobileSDK) public class ExcoMobileSDK : ObjectiveC.NSObject {
  @objc public class var delegate: (any MobileSDK.ExcoMobileSDKDelegate)? {
    @objc get
    @objc set
  }
  @objc public class func activate()
  @objc public class func prefetchSDKJSFiles()
  @objc public class func builder(with playerID: Swift.String) -> MobileSDK.ExcoPlayerConfigurationBuilder
  @objc public class func toggleWebContentLogs(active: Swift.Bool)
  @objc public class func toggleOmidContentLogs(active: Swift.Bool)
  @objc public class func preloadPlayer(with configuration: MobileSDK.ExcoPlayerConfiguration)
  @objc public class func offloadPlayer(with configuration: MobileSDK.ExcoPlayerConfiguration)
  @objc public class func offloadPlayer(for playerID: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
